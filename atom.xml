<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孙小鑫的心</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-24T13:05:57.582Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>孙小鑫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pyspider 启动时踩过的坑及如何出坑</title>
    <link href="http://yoursite.com/2019/04/24/9/"/>
    <id>http://yoursite.com/2019/04/24/9/</id>
    <published>2019-04-24T13:01:34.000Z</published>
    <updated>2019-04-24T13:05:57.582Z</updated>
    
    <content type="html"><![CDATA[<p>安装pyspider:</p><figure class="highlight plain"><figcaption><span>pip3 install pyspider```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">启动pyspider:</span><br><span class="line"></span><br><span class="line">```$ pyspider</span><br></pre></td></tr></table></figure><hr><p>但是却出现这种情况：</p><p><img src="/2019/04/24/9/1.png" alt></p><p>问题出在哪里？首先可以仔细阅读以下报错的信息，发现有可能是<strong>wsgidav</strong>出了问题。</p><blockquote><p>wsgidav发布的3.0.0版本目前仍然是测试版，相对于2.x(例如2.4.1)更改了一些用法。pyspider的3.0及以上版本在安装时，会默认安装wsgidav的3.0.0版本。</p></blockquote><p>所以调整方法有两种：</p><ul><li>卸载wsgidav的3.0.0版本——<figure class="highlight plain"><figcaption><span>pip3 uninstall wsgidav```，安装2.4.1版本——```$ python -m pip install wsgidav</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* 修改配置文件，详见：[Error to start webui service](&lt;https://github.com/binux/pyspider/issues/831&gt;)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">但是再一次输入pyspider启动时，出现下面的情况：</span><br><span class="line"></span><br><span class="line">![](2.png)</span><br><span class="line"></span><br><span class="line">这是端口出现了问题，那么如何找到端口的问题？</span><br><span class="line"></span><br><span class="line">Mac下使用lsof(list open files)来查看端口占用情况，lsof 是一个列出当前系统打开文件的工具。</span><br><span class="line"></span><br><span class="line">使用 lsof 会列举所有占用的端口列表：```$ lsof</span><br></pre></td></tr></table></figure></li></ul><p>也可以使用 -i 查看某个端口是否被占用，如：<figure class="highlight plain"><figcaption><span>lsof -i:3000```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">所以此处就采用：```$ lsof -i:25555```查看25555端口的占用情况，发现</span><br></pre></td></tr></table></figure></p><p>phantomjs 56565 crifan<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">phantomjs占用了25555端口。</span><br><span class="line"></span><br><span class="line">用kill去掉phantomjs</span><br><span class="line"></span><br><span class="line">```$ kill 56565</span><br></pre></td></tr></table></figure></p><p>注意此处是kill 56565，不是kill phantoms，没人电脑对应的kill对象都不一样。</p><hr><p>再次输入<code>pyspider</code></p><p> <img src="/2019/04/24/9/3.png" alt></p><p>运行成功。</p><p>在浏览器中输入：<a href="http://localhost:5000，就可以进入" target="_blank" rel="noopener">http://localhost:5000，就可以进入</a></p><p><img src="/2019/04/24/9/4.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装pyspider:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;pip3 install pyspider```&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="program" scheme="http://yoursite.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>代理服务攻略</title>
    <link href="http://yoursite.com/2019/04/21/8/"/>
    <id>http://yoursite.com/2019/04/21/8/</id>
    <published>2019-04-21T02:43:37.000Z</published>
    <updated>2019-04-21T02:49:40.568Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>代理即替代</p></blockquote><p>当你想在网络上看一部电影，你通过浏览器进入某个视频网站，浏览器向具有该电影资源的服务器发出请求，服务器接受请求后，将该电影的数据传送到你的网络设备上。这就是互联网上客户端和服务器端的基本交互形式。</p><hr><p>像上面这样客户端和服务器的交互过程，我们上网的过程中，这些过程有序的正常进行着。但是，伴随着不断上网的过程，也可能会面临着很多其他的事情。</p><ol><li><p>在视频网站观看电影时，可能因为不是该网站的会员，或者因为网络的原因，会出现卡顿的情况，这样不仅浪费时间，而且会影响观看体验。</p></li><li><p>每个客户端设备都有一个唯一的IP地址，服务器正是根据这个IP地址找到信息的请求者，并向该请求者发送数据。这样在每次进行网络活动时，客户端的IP地址被暴露。服务器或广告商可以利用该IP地址访问网站的信息，向你定点推送广告，甚至盗取你的密码，实施诈骗等行为。</p></li><li>你想观看的电影，可能只存在于某个特定的视频网站，但是由于弄些原因，该网站却被屏蔽，无法访问。</li></ol><p>面对上面的种种情况，我们都可以通过代理服务来解决。</p><hr><h4 id="什么是代理服务？"><a href="#什么是代理服务？" class="headerlink" title="什么是代理服务？"></a>什么是代理服务？</h4><blockquote><p>代理服务是客户端与服务器之间的中间人。</p></blockquote><p>无论是智能手机，笔记本电脑还是其他互联网的设备，代理服务器都可以充当您所有互联网请求的中心。</p><p>如果没有代理，当你访问网站时，你的网络服务提供商(ISP)将使用你的IP地址连接到该站点。使用代理时，该连接首先通过代理服务器运行，代理服务器使用不同的IP地址，通过代理连接到网站。</p><h4 id="代理服务的用途"><a href="#代理服务的用途" class="headerlink" title="代理服务的用途"></a>代理服务的用途</h4><p>为什么需要中间人？</p><ol><li>节省带宽，提升速度</li></ol><p>当代理服务器收到客户端的请求时，它会首先在本地缓存中查找该请求。如果找到该请求，则会将其返回给用户，而无需将请求转发到服务器。如果请求不在缓存中，则代表用户充当客户端的代理服务器使用其自己的IP地址之一，向服务器请求。请求返回后，代理服务器将其与原始请求相关联，并将其转发给用户。代理服务器的这个作用就好比是汽车的经销商，用户去4s店买汽车，想汽车的经销商发出需求(想要什么类型的汽车)，如果库存中有该类型的汽车，经销商直接卖给用户。如果库存没有该类型的汽车，经销商向生产商提交这个用户的请求，生产商将该型号的汽车发送给经销商，经销商再给客户。</p><p>商品的销售代理作为中间人，是为了让货物快速销售出去，即为了提高效率。</p><ol start="2"><li>隐私保护，提高安全性</li></ol><p>一些代理服务可以改变你进行网络请求时的IP地址和其他需要验证的信息，这意味着目标服务器不知道实际的请求者是谁，这有助于保护您的个人信息和浏览习惯更加私密。这就好比</p><p>你也能通过配置服务器将你请求的网页进行加密，以防止别人窥探你的事务。你也能阻止恶意软件通过代理服务器访问你。</p><ol start="3"><li>访问被阻止的资源</li></ol><p>代理服务能够让用户登录其他地方的代理服务器并从那里进行登录访问。代理服务器使它看起来像你在加利福尼亚州，但你实际上住在北卡罗来纳州。世界各地的一些政府密切监视和限制对互联网的访问，代理服务器为其公民提供未经审查的互联网访问。代理服务的这个作用有点像海外代购，国内买不到需要的商品，就通过代购购买者自己需要的商品。</p><h4 id="代理服务的类型"><a href="#代理服务的类型" class="headerlink" title="代理服务的类型"></a>代理服务的类型</h4><p>代理服务的协议类型有很多，下面是三种最常见的代理协议：</p><ul><li><strong>HTTP:</strong>最常见的代理协议类型，主要用于Web浏览。此类代理是不安全的，因此最好避免将其用于敏感站点。</li><li><strong>HTTPS:</strong>HTTP的安全版本。如果要发送和接收密码，信用卡号等敏感信息，请选择此选项。</li><li><strong>SOCKS:</strong> SOCKS是一种更通用的HTTP协议形式，可以处理更多种类的互联网流量，通常用于托管。由于它的受欢迎程度，它通常比其他代理慢得多。它还支持HTTPS。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;代理即替代&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当你想在网络上看一部电影，你通过浏览器进入某个视频网站，浏览器向具有该电影资源的服务器发出请求，服务器接受请求后，将该电影的数据传送到你的网络设备上。这就是互联网上客户端和服务器端的基本交互形式
      
    
    </summary>
    
      <category term="program" scheme="http://yoursite.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>homebrew cask 的理解与应用</title>
    <link href="http://yoursite.com/2019/04/16/7/"/>
    <id>http://yoursite.com/2019/04/16/7/</id>
    <published>2019-04-16T03:00:18.000Z</published>
    <updated>2019-04-16T09:46:34.870Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是homebrew-cask"><a href="#什么是homebrew-cask" class="headerlink" title="什么是homebrew cask?"></a>什么是homebrew cask?</h4><p>官网给出的解释为：</p><blockquote><p>“To install, drag this icon…” </p><p>Homebrew Cask extends <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> and brings its elegance, simplicity, and speed to the installation and management of GUI macOS applications such as Atom and Google Chrome.</p></blockquote><blockquote><p>“安装，拖拽图标…”</p><p>Homebrew Cask 扩展了Homebrew，它能更加优雅、简单并且快速的下载和管理macOS的图形用户界面应用，比如：Atom 和 Google Chrome。</p></blockquote><hr><h4 id="home-brew-的优势"><a href="#home-brew-的优势" class="headerlink" title="home-brew 的优势"></a>home-brew 的优势</h4><p>brew与brew cask相比，针对的下载对象不同：</p><ul><li>brew ——下载<strong>不带界面的工具</strong>和<strong>第三方库</strong></li><li>brew cask——下载<strong>带界面的应用软件</strong></li></ul><p>比如：$ brew cask install chrome  安装谷歌浏览器，就可以直接找到图标运行。所以brew cask就是苹果官方app store的补充，一个非苹果官方软件商店。很多软件都没有在苹果官方app store商店上架，我们可以通过brew cask一键下载。</p><hr><h4 id="使用home-brew的实例"><a href="#使用home-brew的实例" class="headerlink" title="使用home brew的实例"></a>使用home brew的实例</h4><p>假如想要安装<strong>phantomjs</strong>，常见的步骤为：<strong>上官网——下载文件——解压——配置环境变量</strong>。这些操作对于一个新手来说比较繁琐的，所以很多人喜欢在terminal上使用命令行直接下载。</p><p>比如有人使用npm：</p><blockquote><p>$ npm install phantomjs</p></blockquote><p>又或者使用brew：</p><blockquote><p>$ brew install phantomjs</p></blockquote><p>结果发现都没能下载phantomjs</p><p>这个时候brew cask就发挥作用了：</p><blockquote><p>$ brew tap homebrew/cask</p></blockquote><blockquote><p>$ brew cask install phantomjs</p></blockquote><p>就能成功下载。</p><p>其中，brew tap表示进入到仓库，这里表示进入homebrew/cask仓库。如果没有brew tap，软件的安装会在默认的主仓库下进行。</p><hr><p>参考资料：</p><ul><li><a href="https://github.com/Homebrew/homebrew-cask" target="_blank" rel="noopener">Github/homebrew-cask</a></li><li><a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a></li><li><a href="https://www.zhihu.com/question/22624898" target="_blank" rel="noopener">brew和brew cask的区别</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是homebrew-cask&quot;&gt;&lt;a href=&quot;#什么是homebrew-cask&quot; class=&quot;headerlink&quot; title=&quot;什么是homebrew cask?&quot;&gt;&lt;/a&gt;什么是homebrew cask?&lt;/h4&gt;&lt;p&gt;官网给出的解释为：&lt;/p
      
    
    </summary>
    
      <category term="software" scheme="http://yoursite.com/categories/software/"/>
    
    
  </entry>
  
  <entry>
    <title>悖论困境</title>
    <link href="http://yoursite.com/2019/04/14/6/"/>
    <id>http://yoursite.com/2019/04/14/6/</id>
    <published>2019-04-14T13:27:02.000Z</published>
    <updated>2019-04-14T13:31:59.437Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/04/14/6/摄图网_501044484.ipg" alt></p><blockquote><p>每个人都是自己欲望的囚徒<br>———刘小枫《沉重的肉身》</p></blockquote><p>逻辑学中有许多经典的悖论，如：所有的克里特人都是说谎者。</p><p>悖论的产生是因为混淆了集体和成员。克里特人是一个集体，某一个克里特人是成员。任何一个克里特人陈述这句话都具有<strong>反身性</strong>，他一方面既是克里特人又是说谎者。</p><p>克里特人的陈述不仅适用于集体的一个成员，同样也适用于自身。所以逻辑理论中有个重要的公理：</p><blockquote><p>凡是牵涉到集体所有成员的陈述，不应是该集体的一个成员。</p></blockquote><p>所以上面的悖论中，这句话只能由非克里特人说，如果克里特人说这句话就会陷入逻辑悖论。</p><hr><p><img src="/2019/04/14/6/摄图网_500616530.jpg" alt></p><p>生活中，如果我们想产生一中自然而然的状态时，常常会陷入一种<strong>进退两难</strong>的境地，这是悖论在生活中产生的效应。</p><p>失眠时，我们会不断的告诫自己，快点睡着、快点睡着。我们动用意志力想让自己快速进入睡眠状态。但是，动用的意志力只会让人更加清醒，越清醒就越想让自己赶快睡着，这样就进入了一个恶性循环转态。只要一个人尝试着让自己睡着，就不会睡着。<strong>因为睡觉是一中自然状态</strong>。</p><p>快速睡眠的最好办法，就是不要触动到<strong>意志力</strong>，任思绪乱飞。</p><p>面对失眠时，我自己形成了一个小技巧。每当失眠时，想到明天还有很多事情要完成，自己必须要早起，就越发紧张，越发睡不着。慢慢的自己发现，如果我告诉自己——既然失眠了，索性明天就晚点起床，事情往后推一推，并且将闹钟关掉。这样自己很快放松下来，反而快速进入了睡眠状态。即便没有闹钟，第二天依然能起来，几乎没有耽误事情。</p><p>同样，在考场上，我们经常会碰到这种的情况——临近交卷，有些题目还没思考出来。如果这道题是平时见过的，那么我们就会更加紧张，更加垂头顿足，怎么平时见过的题目都没有做出来。反而是那些平时没遇到过，感觉大家都思考不出来，其余的题目已经达到了自己的预期，常常能想到一些内容写上去。</p><p>生活中面对很多可遇不可求的事情，都容易使我们陷入悖论中。淡然一点、自然一点，反而能够产生好的效果。但问题是，一旦我们试图让自己淡然，就已经不坦然了。所以我们要学会欺骗自己的大脑，去引导它，让它自己产生自然的状态。</p><p>如何欺骗自己的大脑？降低<strong>自己的期望</strong>。如果失眠时，就干脆不打算快速入睡。</p><hr><p>转瞬一间，似水流年；江河依旧，情远思迁。期望的一点改变，就足以从陌上雪到千山月。</p><blockquote><p>偏执的人一旦陷入爱情，就成为自己的囚徒。<br>——独木舟《深海里的星星》</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/04/14/6/摄图网_501044484.ipg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个人都是自己欲望的囚徒&lt;br&gt;———刘小枫《沉重的肉身》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;逻辑学中有许多经典的悖论，如：所有的
      
    
    </summary>
    
      <category term="gossip" scheme="http://yoursite.com/categories/gossip/"/>
    
    
  </entry>
  
  <entry>
    <title>如何在word中优雅的排版数学公式</title>
    <link href="http://yoursite.com/2019/04/10/5/"/>
    <id>http://yoursite.com/2019/04/10/5/</id>
    <published>2019-04-10T02:45:55.000Z</published>
    <updated>2019-04-10T02:49:50.072Z</updated>
    
    <content type="html"><![CDATA[<p>word作为文字处理软件，被众多文字处理者使用，但其实word写作者是很不友好的。word让人浪费很多的时间在排版上，却耽误了更重要的写作工作。</p><p>对于写作者，往往更喜欢用Markdown进行书写。会不会用Markdown、用不用Markdown？是判断一个写作者写作效率的重要指标。</p><p>但是，由于历史原因，word被众多编辑者所采用，我们为了与其他人进行交互协作，又不得不使用word进行文字处理工作。更为令人烦恼的是，当遇到数学公式排版时，word的弊端更是暴露无疑。</p><p>如果采用latex进行排版，只能导出pdf格式，不方便与协作者进行交互。常常面临着不得不使用word排版数学公式的问题，那么如何做到高效、优美的在word中对数学公式进行排版？</p><p>用Word打开需要排版的文件后，在word上面的菜单栏中选择——<strong>插入</strong>——<strong>符号</strong>——<strong>公式</strong>。</p><p>在自己需要插入公式的地方会出现下面这种标记公式的区域：</p><p><img src="/2019/04/10/5/1.png" alt></p><p>在这区域内，就可以优雅的编辑数学公式。其方法采用的是tex程序语言进行公式输入，其产生的数学公式就和latex一样优美。</p><p>比如：</p><p><img src="/2019/04/10/5/2.png" alt></p><p><img src="/2019/04/10/5/3.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;word作为文字处理软件，被众多文字处理者使用，但其实word写作者是很不友好的。word让人浪费很多的时间在排版上，却耽误了更重要的写作工作。&lt;/p&gt;
&lt;p&gt;对于写作者，往往更喜欢用Markdown进行书写。会不会用Markdown、用不用Markdown？是判断一个写作
      
    
    </summary>
    
      <category term="software" scheme="http://yoursite.com/categories/software/"/>
    
    
  </entry>
  
  <entry>
    <title>Latex 内联模式和外显模式</title>
    <link href="http://yoursite.com/2019/04/09/4/"/>
    <id>http://yoursite.com/2019/04/09/4/</id>
    <published>2019-04-09T12:55:30.000Z</published>
    <updated>2019-04-09T13:03:17.567Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/04/09/4/1.jpg" alt></p><p>Latex采用两种数学模式来书写数学表达式：<strong>内联模式</strong>(inline mode)和<strong>外显模式</strong>(display mode)。</p><p>内联模式是将公式作为文字内容的一部分。外显模式是将公式单独显示，不作为一段文字内的部分。</p><p>例如：</p><ol><li>内联模式的呈现</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在物理学上，爱因斯坦在1905年发现了质能方程：$E=mc^2$，他认为质量和能量在一定条件下可以互相转化，宇宙诞生之初就只有能量，所有的物质都是那些能量变来的。</span><br></pre></td></tr></table></figure><blockquote><p>在物理学上，爱因斯坦在1905年发现了质能方程：$E=mc^2$，他认为质量和能量在一定条件下可以互相转化，宇宙诞生之初就只有能量，所有的物质都是那些能量变来的。</p></blockquote><p>内联模式的分隔符为：<strong>\ (···\ )</strong>， <strong>$···$</strong>，或者<strong>\ begin{math} ···\ end{math}</strong></p><ol start="2"><li>外显模式的呈现</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在物理学上，爱因斯坦在1905年发现了质能方程：</span><br><span class="line">$$E=mc^2$$</span><br><span class="line">他认为质量和能量在一定条件下可以互相转化，宇宙诞生之初就只有能量，所有的物质都是那些能量变来的。</span><br></pre></td></tr></table></figure><blockquote><p>在物理学上，爱因斯坦在1905年发现了质能方程：<br>$$<br>E=mc^2<br>$$<br>他认为质量和能量在一定条件下可以互相转化，宇宙诞生之初就只有能量，所有的物质都是那些能量变来的。</p></blockquote><p>外显模式的分隔符为：<strong>\ [···\ ]</strong>，<strong>$$···$$</strong>，<strong>\ begin{displaymath} ···\ end{displaymath}</strong>，或者<strong>\ begin{equation} \ end{equation}</strong>.</p><h3 id="数学模块中的间距设定"><a href="#数学模块中的间距设定" class="headerlink" title="数学模块中的间距设定"></a>数学模块中的间距设定</h3><p>下面介绍如何在数学模式下插入不同长度的空格。</p><table><thead><tr><th style="text-align:left">latex 代码</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">\ quad</td><td style="text-align:left">空格等于当前字体大小(=18mu)</td></tr><tr><td style="text-align:left">\ ,</td><td style="text-align:left">\quad 的 3/18 (=3mu)</td></tr><tr><td style="text-align:left">\ :</td><td style="text-align:left">\quad 的 4/18 (=4mu)</td></tr><tr><td style="text-align:left">\ ;</td><td style="text-align:left">\quad 的 5/18 (=5mu)</td></tr><tr><td style="text-align:left">\ !</td><td style="text-align:left">\quad 的-3/18 (=-3mu)</td></tr><tr><td style="text-align:left">\ qquad</td><td style="text-align:left">\quad 的两倍 (=36mu)</td></tr></tbody></table><h3 id="书写公式时，面临的其他间距问题"><a href="#书写公式时，面临的其他间距问题" class="headerlink" title="书写公式时，面临的其他间距问题"></a>书写公式时，面临的其他间距问题</h3><p>上面关于数学公式间距的讨论，都只考虑了数学公式内部的间距的设定。如果想调整数学公式和上下文文字之间的间距，该如何调整Latex代码呢？</p><p>方程上面的间距由 <figure class="highlight plain"><figcaption><span>abovedisplayskip``` 决定，而它们下方的间距由 ```\ belowdisplayskip```确定，例如:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">``` latex</span><br><span class="line">\setlength&#123;\abovedisplayskip&#125;&#123;3pt&#125;</span><br><span class="line">\setlength&#123;\belowdisplayskip&#125;&#123;3pt&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/04/09/4/1.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Latex采用两种数学模式来书写数学表达式：&lt;strong&gt;内联模式&lt;/strong&gt;(inline mode)和&lt;strong&gt;外显模式&lt;/strong&gt;(display mode)。&lt;
      
    
    </summary>
    
      <category term="program" scheme="http://yoursite.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>概念的力量</title>
    <link href="http://yoursite.com/2019/03/30/3/"/>
    <id>http://yoursite.com/2019/03/30/3/</id>
    <published>2019-03-30T13:12:33.000Z</published>
    <updated>2019-03-31T08:44:49.630Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>赤橙黄绿青蓝紫，谁持彩练当空舞<br>————毛泽东</p></blockquote><hr><p>彩虹分7种颜色，为什么不是14种，甚至更多，这是人为设定的结果。</p><p>物理学上，颜色的形成是反射不同波长的光，被肉眼感知的结果。</p><blockquote><p><strong>颜色是人对不同光的感知</strong></p></blockquote><p>自然界中， 可见光的波长范围约312.3nm——745.4nm，波长频率是连续的。这样，人眼感知到的颜色就应该是连续的、界限模糊的。如下图所示：</p><p><img src="/2019/03/30/3/2.png" alt></p><p>但是，当我们需要将彩虹刻画出时，却呈现出界限分明的颜色，比如下图：</p><p><img src="/2019/03/30/3/1.png" alt></p><hr><p>人们喜欢将嘈杂的世界进行分类，一方面让世界显得有序，另一方面降低了理解世界的认知负荷。</p><p>所以我们将看到的世界分成的不同的颜色，将人类简单的分为男人和女人、好人和坏人等等。这些分类帮助我们更好的理解世界，观察你身边的任何一件物品、一桩事情，你都可以将它们归为某一类。</p><p>那么，人类是如何进行分类的？——<strong>概念</strong></p><p>赤橙黄绿青蓝紫是颜色的7种概念，男人和女人是不同人的两种概念。没有概念，我们将体验到一个空白的世界。没有不同颜色的概念，那么这个世界就是暗淡的。没有男人和女人的概念，人类就单一了许多。正如《龙珠》里的孙悟空，一开始没有男人和女人的概念，屡屡冒犯到女生。</p><hr><p>概念帮我们分类，<strong>大脑会淡化同类差异，强化类别间差异</strong>。</p><p>红色的波长频率为625nm—740 nm，橙色为590—625 nm。因此波长为645nm和700nm的光，都会被感知为红色，而610nm的波长的光被感知为橙色。但是，从波长的频率来看，645nm的光波与610nm的光波更接近，其更应该划归为一类，其差别应更不易被感知，但是我们却容易将它们区分出来。这是因为我们只有红色和橙色这类颜色的概念。</p><p>根据概念，大脑将波长为645nm和700nm的光集合在一起，而其与610nm的光波分开。如果脑中概念丰富，具备深红色(700nm)和鲜红色(645nm)的概念，那么我们就不会模糊的将其归为一类，而会强化它们之间的差别。这样我也许就能感知出鲜红色(645nm)与橙色(610nm)的差异比鲜红色(645nm)与橙色(700nm)的差异小的事实。</p><p>因为有了深红色和鲜红色的概念，世界更丰富了、更清晰了、与更接近事实了。</p><hr><p><strong>概念产生意义</strong></p><p>概念赋予声音意义，如果你英语水平较高(概念丰富)，那么你会对一段英语发音产生理解，而不会认为是噪音。</p><p>概念赋予物质意义，和尚不食荤，是因为其具有不杀生、戒律等概念，而普通人则无所忌惮。这种行为的差异只是因为概念系统不同。</p><p>拥有了概念，你的大脑赋予世界了意义。</p><hr><p><strong>你的世界就是大脑中概念构建的</strong></p><p>你具有什么样的概念，就拥有什么样的世界。大脑根据概念赋予感觉以意义，跟据概念拟合新输入的感觉。是否有类似的感觉、这种感觉什么时候出现过、需要如何面对这感觉。当感觉输入，大脑迅速进行类比、拟合。根据拟合的情况，进行删减、剔除和增加等，重新建立新的概念库。</p><p>你利用概念，通过分类，建立起对物体、事件的体验。</p><hr><p><strong>拥有丰富的世界</strong></p><p>人类天生对陌生事物恐惧，因为这种不熟悉让大脑无法用已知的概念进行预测。</p><p>但是对陌生事物的了解，直接丰富了我们的概念库。概念库决定了我们感知的生动度和形象度，决定了我们体验到的世界的真实度。</p><blockquote><p>我们必须渴求真相，要渴求到为了换取真相甚至不惜被羞辱的地步。<br>————全球最大对冲基金创始人雷·达里奥(Ray Dalio)</p></blockquote><p>达里奥一语点破的真相的重要性。更溢出了概念对我们的重要性。</p><hr><blockquote><p>三月昏，参星夕。杏花盛，桑叶白。<br>蜻蜓鸣，衣裘成。蟋蟀鸣，娴妇惊。<br>河射角，堪夜作。犁星没，水生骨。</p></blockquote><p>短短几句诗，体验上天下地，色味声俱全。这是概念的力量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;赤橙黄绿青蓝紫，谁持彩练当空舞&lt;br&gt;————毛泽东&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;彩虹分7种颜色，为什么不是14种，甚至更多，这是人为设定的结果。&lt;/p&gt;
&lt;p&gt;物理学上，颜色的形成是反射不同波长的光，被肉眼感知的结果。&lt;/
      
    
    </summary>
    
      <category term="Blockchain" scheme="http://yoursite.com/categories/Blockchain/"/>
    
    
  </entry>
  
  <entry>
    <title>MoSCoW方法</title>
    <link href="http://yoursite.com/2019/03/17/2/"/>
    <id>http://yoursite.com/2019/03/17/2/</id>
    <published>2019-03-17T09:32:13.000Z</published>
    <updated>2019-03-31T08:45:07.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MoSCoW-方法"><a href="#MoSCoW-方法" class="headerlink" title="MoSCoW 方法"></a>MoSCoW 方法</h1><p>莫斯科(MoSCoW)方法是一种在产品开发、项目管理和商业分析等过程中，为了达成一个共同的目的，而形成的一套优先选择原则。</p><p>这种优先级排序方法由Dai Clegg开发的，首次应用于敏捷的项目交付框架动态系统开发方法(DSDM)。</p><p>在一项灵活的软件开发项目中，最后期限是固定的，项目的重点必须放在最重要的事情上，如Scrum、快速应用程序开发(RAD)和DSDM。</p><h4 id="优先级的排序"><a href="#优先级的排序" class="headerlink" title="优先级的排序"></a>优先级的排序</h4><p>所有要求都很重要，但它们的优先顺序是尽早提供最大和最直接的商业利益。开发人员最初会尝试提供所有必须拥有，应该拥有和可能拥有的要求，但如果交付时间有限，那么应该可能的要求将首先被删除。</p><p>MoSCoW方法分为四个级别：Must have、Should have、Could have和Would have。</p><p><strong>Must have</strong></p><p>必须的要求对一个项目最为重要，在到期日前未完成必须的要求就意味着项目失败。</p><p><strong>Should have</strong></p><p>应具有的要求很重要，但在交货时间框中交货时不是必需的。虽然应该具有与必须一样重要的要求，但它们通常不是时间关键的，或者可能有另一种方式来满足要求，因此它可以保留到未来的交付时间框。</p><p><strong>Could have</strong></p><p>可能的要求是可取的但不是必需的，并且可以以很少的开发成本改善用户体验或客户满意度。如果时间和资源允许，通常会包括这些可能的要求。</p><p><strong>Would have</strong></p><p>“利益相关者”的要求将不会被利益相关方同意为最不重要，回报最低的项目，或者当时不合适。因此，没有要求没有计划到下一个交付时间表的计划中。没有要求被删除或重新考虑包含在以后的时间框中。（注意：偶尔会使用“想要使用的术语”;但是，这种用法是不正确的，因为最后一个优先级明确说明某些内容超出了交付范围）。</p><p>在新产品开发中，特别是那些遵循灵活性的软件开发过程中，总是有更多的事情要做，而时间和资金优先（因此需要优先级）。例如，如果一个团队有太多潜在的史诗（即高级故事）用于他们的产品的下一个版本，他们可以使用MoSCoW方法来选择哪些史诗是必须的，哪些应该有，等等;最小可行产品（或MVP）将是那些标记为必须的史诗。[4]通常情况下，一个团队会发现，即使在确定他们的MVP之后，他们也有太多的工作来满足他们的预期能力。在这种情况下，团队可以使用MoSCoW方法选择哪些特征（或故事，如果这是其组织中的史诗子集）是必须的，应该具有的等等;最小的可销售特征（或MMF）将是所有标记为必须的特征。[5]如果在选择MVP或MMF后有足够的容量，那么团队可以计划包括应该有甚至可能有项目。</p><h4 id="这个原则还可以用在什么地方"><a href="#这个原则还可以用在什么地方" class="headerlink" title="这个原则还可以用在什么地方"></a>这个原则还可以用在什么地方</h4><p>尽管MoSCoW原则起源于软件开发领域，但是里面包含的思想，是否对我们生活中的其他方面有启发呢？</p><p>我们是如何建立自己的价值观的，生活中我们就是在不停的选择和抉择中，建立起自己的价值观，我们也是在利用自己的价值观在进行选择。</p><p>所以MoSCoW方法可以应用在我们生活的方方面面，因为<strong>生活就是一道选择题</strong>，是选择就是设计到选取和舍弃。那么我们依靠什么样的规则进行选取，这个时候就可以考虑MoSCow方法了。他是帮助我们建立自身价值观的过程。</p><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a><strong>参考资料：</strong></h4><p>1.<a href="https://en.wikipedia.org/wiki/MoSCoW_method" target="_blank" rel="noopener">wikipedia(MoSCoW)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MoSCoW-方法&quot;&gt;&lt;a href=&quot;#MoSCoW-方法&quot; class=&quot;headerlink&quot; title=&quot;MoSCoW 方法&quot;&gt;&lt;/a&gt;MoSCoW 方法&lt;/h1&gt;&lt;p&gt;莫斯科(MoSCoW)方法是一种在产品开发、项目管理和商业分析等过程中，为了达成一个
      
    
    </summary>
    
      <category term="program" scheme="http://yoursite.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>Macbook电脑耗能情况的查询</title>
    <link href="http://yoursite.com/2019/03/07/1/"/>
    <id>http://yoursite.com/2019/03/07/1/</id>
    <published>2019-03-07T09:10:20.000Z</published>
    <updated>2019-03-31T08:45:05.339Z</updated>
    
    <content type="html"><![CDATA[<p>Macbook在正常的使用情况下，通常能待机10个小时左右，这个在外办公和出差的人很大的方便。</p><p>但是，偶尔我们会发现Macbook的待机时间并不乐观，通常只能坚持3、4个小时，电脑运行中也能明显感觉到Macbook右前方有点发烫，电脑耗电上升。</p><p>为什么有的时候，Macbook的待机时间很长，有的时候耗能却急速上升。这很可能是因为我们打开的某个应用导致的。</p><p>那么如何监控Macbook的耗能情况，可以从以下几步进行：</p><blockquote><ol><li>对于Macbook电脑来讲，可以直接点击屏幕右上方的电池图标(如果没有看见电池图标，可以通过<strong>系统偏好设置——节能——(勾住)在菜单栏显示电池状态</strong>的方式打开)，比如下图所示：</li></ol></blockquote><p><img src="/2019/03/07/1/屏幕快照 2019-03-06 下午9.30.23.png" alt></p><hr><p>如这张图所示：使用大量能耗的软件是<strong>Atom</strong></p><p>如果想继续查看其他软件的能耗情况，可以直接点击图中显示出的任一软件图标：</p><p><img src="/2019/03/07/1/屏幕快照 2019-03-06 下午9.33.24.png" alt></p><p>会显示出如下图所示的结果：</p><p><img src="/2019/03/07/1/屏幕快照 2019-03-06 下午9.34.36.png" alt></p><p>具体就可以依照上图来查看自己电脑每个软件的耗能情况，可以依据自己的情况选择关闭一些耗能高的软件。</p><p>比如：每次自己的编程的过程中，Macbook的耗能都会急剧上升，这是因为其中了<strong>Atom</strong>的原因，所以一旦我完成了代码的工作，为了维持电量，我就会关掉Atom。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Macbook在正常的使用情况下，通常能待机10个小时左右，这个在外办公和出差的人很大的方便。&lt;/p&gt;
&lt;p&gt;但是，偶尔我们会发现Macbook的待机时间并不乐观，通常只能坚持3、4个小时，电脑运行中也能明显感觉到Macbook右前方有点发烫，电脑耗电上升。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="program" scheme="http://yoursite.com/categories/program/"/>
    
    
  </entry>
  
</feed>
